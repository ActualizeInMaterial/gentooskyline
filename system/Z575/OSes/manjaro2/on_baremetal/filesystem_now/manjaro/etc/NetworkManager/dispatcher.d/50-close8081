#!/bin/sh

INTERFACE=$1 # The interface which is brought up or down
STATUS=$2 # The new state of the interface

#XXX: do not change this(required for whatismyip!):
dns=208.67.222.220
theport=8081
wait4router_seconds=30
wait4inet_seconds=60
#^ waits this much for the router to be up, then again for internet access! so 2x that time!

whatismyip() {
  if test -x "`which dig 2>/dev/null`"; then
    dig @${dns} myip.opendns.com +short | tee /tmp/myip.log
  elif test -x "`which drill 2>/dev/null`"; then                                  
    drill @${dns} myip.opendns.com | grep '^myip.opendns.com'| cut -f 5
  else
    exit 1
  fi
}

case "$STATUS" in
    'up') # $INTERFACE is up
      #wait for router to be up
      let 'count=0'
      while true; do
        ping -c 1 -W 1 -- 192.168.1.1
        if test "$?" -eq "0"; then
          echo "router responds to ping! on try $count"
          let 'count=0'
          while true; do
            ping -c 1 -W 1 -- "$dns"
            if test "$?" -eq "0"; then
              echo "router has got internet! on try $count"
              break;
            fi
            let 'count++'
            if test "$count" -gt "$wait4inet_seconds"; then
              echo '!! router did not gain internet in due time, aborting'
              exit 2
            fi
          done
          break; #required!
        fi
        let 'count++'
        if test "$count" -gt "$wait4router_seconds"; then
          echo '!! router did not respond to ping, aborting'
          exit 1
        fi
      done

      ip="`whatismyip`"
      if test -n "$ip"; then
        echo "Closing port $theport"
        #should return: curl: (52) Empty reply from server
        #then the next request is: curl: (7) Failed to connect to $ip port $theport: Connection refused
        curl -I -Ss -- "http://${ip}:$theport/"
        ec="$?"
        if test "$ec" -ne "52" -a "$ec" -ne "7"; then
          echo "!! failed closing port $theport, not 52 (nor 7 already)"
        fi
        curl -I -Ss -- "http://${ip}:$theport/"
        if test "$ec" -ne "7"; then
          echo "!! failed closing port $theport, not 7"
        fi
      else
        echo "!! Failed closing port $theport"
      fi
      echo "The port $theport was closed!"
	;;
esac
