#!/bin/bash


gitcheck() {
  if test "$#" -ne "1"; then
    echo "too little/many args($#): $@"
    exit 15
  fi
  greptext="$1"
  git status|grep -q "$greptext"
  declare -a pipes=("${PIPESTATUS[@]}")
  grepec="${pipes[1]}"
  gitec="${pipes[0]}"
  if test "0$gitec" -ne "0"; then
    echo "Non-zero exit code($gitec) from \"git status '`pwd`'\"" | grep --color=always "Non-zero"
    return 16
    #ec==16 means git status failed, likely not a git repo!
  fi
  if test "$grepec" -ne 0; then
    #ec != 0 (==1) means not changed!
    return 1
  else
    #ec == 0 means changed!
    return 0
  fi
}

gitcheckindir() {
  if test "$#" -ne "2"; then
    echo "too little/many args($#): $@"
    exit 13
  fi
  dir="$1"
  greptext="$2"
  pushd "$dir" >/dev/null
  ec="$?"
  if test "$ec" -ne "0"; then
    echo "pushd failed! for '$dir'"
    return $ec
  fi
  if gitcheck "$greptext"; then
    rt=0
  else
    rt=1
  fi
  popd >/dev/null
  ec="$?"
  if test "$ec" -ne "0"; then
    echo "popd failed!"
    return $ec
  fi
  return "$rt"
  #==0 if changed
  #==1 if not changed
}

gitchangedcheck() {
  dir="$1"
  if test -z "$dir"; then
    echo "no dir passed as arg"
    exit 12
  fi
  if test ! -d "$dir"; then
    echo "Passed dir arg '$dir' doesn't exist!" | grep --color=always "doesn't exist"
    return 14
  fi

  if gitcheckindir "$dir" 'Changes not staged for commit:'; then
    echo "git changed in dir: '$dir'" | grep --color=always 'git changed'
  fi
}

git_moo_check() {
  dir="$1"
  greptext="$2"
  explanation="$3"
  if test "$#" -ne "3"; then
    echo "too little/many args($#): $@" | grep --color=always "args"
    exit 18
  fi

  if test -z "$dir"; then
    echo "no dir passed as arg" | grep --color=always "no dir"
    exit 12
  fi
  if test ! -d "$dir"; then
    echo "Passed dir arg '$dir' doesn't exist!" | grep --color=always "doesn't exist"
    return 14
  fi

  if test -z "$greptext"; then
    echo "empty greptext passed" | grep --color=always "empty"
    exit 17
  fi

  if gitcheckindir "$dir" "$greptext"; then
    echo "git $explanation in dir: '$dir'" | grep --color=always "$explanation" 
#    if test "1${PIPESTATUS[1]}" -eq "10"; then
#      echo "^ ${greptext}." | grep --color=always "${greptext}"
#    fi
  fi
}


#XXX: no spaces in paths here! unless they are within double quotes "" - then it's okay
declare -ar gitdirlist=(
#eg. "/tmp/a b"  #works fine! (assuming it was 'git init'-ed)
#"/tmp/a c" #fails if not git init-ed, but assuming dir exists! but still continues to next dirs
#"/tmp/a d" #fails if dir doesn't exist; but still continues to next dirs
"/home/zazdxscf/gentooskyline"
"/home/zazdxscf/build/1nonpkgs/respeccing"
"/home/zazdxscf/build/1nonpkgs/dcqs"
"/home/zazdxscf/build/1nonpkgs/hsts-everywhere-chrome"
"/home/zazdxscf/build/1nonpkgs/rustLearnage"
"/home/zazdxscf/build/1nonpkgs/footab-code"
)

for i in "${gitdirlist[@]}"; do
#  echo "$i"
  #gitchangedcheck "$i"
#  echo "$?"
  #gitaheadcheck "$i"
  git_moo_check "$i" 'Changes not staged for commit:' "MODified"
  if test "$?" -ne "14"; then
    git_moo_check "$i" "Your branch is ahead of" "unpushed"
    git_moo_check "$i" "Untracked files:" "NEWfiles"
  fi
done

